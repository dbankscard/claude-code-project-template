# {{PROJECT_NAME}} - AI Context Template (claude-master)

## 1. Project Overview
- **Vision:** {{PROJECT_DESCRIPTION}}
- **Current Phase:** Initial Development
- **Key Architecture:** [To be defined based on project needs]
- **Development Strategy:** Iterative development with Claude Code assistance

## 2. Project Structure

**⚠️ CRITICAL: AI agents MUST read the [Project Structure documentation](/docs/ai-context/project-structure.md) before attempting any task to understand the complete technology stack, file tree and project organization.**

{{PROJECT_NAME}} follows a modular Python architecture. For the complete tech stack and file tree structure, see [docs/ai-context/project-structure.md](/docs/ai-context/project-structure.md).

## 3. Coding Standards & AI Instructions

### General Instructions
- Your most important job is to manage your own context. Always read any relevant files BEFORE planning changes.
- When updating documentation, keep updates concise and on point to prevent bloat.
- Write code following KISS, YAGNI, and DRY principles.
- When in doubt follow proven best practices for implementation.
- Do not commit to git without user approval.
- Do not run any servers, rather tell the user to run servers for testing.
- Always consider industry standard libraries/frameworks first over custom implementations.
- Never mock anything. Never use placeholders. Never omit code.
- Apply SOLID principles where relevant. Use modern framework features rather than reinventing solutions.
- Be brutally honest about whether an idea is good or bad.
- Make side effects explicit and minimal.
- Design database schema to be evolution-friendly (avoid breaking changes).

### File Organization & Modularity
- Default to creating multiple small, focused files rather than large monolithic ones
- Each file should have a single responsibility and clear purpose
- Keep files under 350 lines when possible - split larger files by extracting utilities, constants, types, or logical components into separate modules
- Separate concerns: utilities, constants, types, components, and business logic into different files
- Prefer composition over inheritance - use inheritance only for true 'is-a' relationships, favor composition for 'has-a' or behavior mixing
- Follow existing project structure and conventions - place files in appropriate directories
- Use well defined sub-directories to keep things organized and scalable
- Structure projects with clear folder hierarchies and consistent naming conventions
- Import/export properly - design for reusability and maintainability

### Type Hints (REQUIRED)
- **Always** use type hints for function parameters and return values
- Use `from typing import` for complex types
- Prefer `Optional[T]` over `Union[T, None]`
- Use Pydantic models for data structures

```python
# Good
from typing import Optional, List, Dict, Tuple

async def process_data(
    data: List[Dict[str, Any]],
    user_id: str,
    options: Optional[Dict[str, Any]] = None
) -> Tuple[bool, Dict[str, Any]]:
    """Process data with proper type hints."""
    pass
```

### Naming Conventions
- **Classes**: PascalCase (e.g., `DataProcessor`)
- **Functions/Methods**: snake_case (e.g., `process_data`)
- **Constants**: UPPER_SNAKE_CASE (e.g., `MAX_RETRIES`)
- **Private methods**: Leading underscore (e.g., `_validate_input`)
- **Pydantic Models**: PascalCase with `Schema` suffix (e.g., `ChatRequestSchema`, `UserSchema`)

### Documentation Requirements
- Every module needs a docstring
- Every public function needs a docstring
- Use Google-style docstrings
- Include type information in docstrings

```python
def calculate_total(items: List[Item], tax_rate: float) -> Decimal:
    """Calculate total price including tax.

    Args:
        items: List of items to calculate total for
        tax_rate: Tax rate as decimal (e.g., 0.08 for 8%)

    Returns:
        Total price including tax as Decimal

    Raises:
        ValueError: If tax_rate is negative
    """
    pass
```

### Security First
- Never trust external inputs - validate everything at the boundaries
- Keep secrets in environment variables, never in code
- Log security events but never log sensitive data
- Authenticate users at the API gateway level - never trust client-side tokens
- Use Row Level Security (RLS) to enforce data isolation between users
- Design auth to work across all client types consistently
- Use secure authentication patterns
- Validate all authentication tokens server-side
- Sanitize all user inputs before storing or processing

### Error Handling
- Use specific exceptions over generic ones
- Always log errors with context
- Provide helpful error messages
- Fail securely - errors shouldn't reveal system internals

### Observable Systems & Logging Standards
- Every request needs a correlation ID for debugging
- Structure logs for machines, not humans - use JSON format with consistent fields (timestamp, level, correlation_id, event, context) for automated analysis
- Make debugging possible across service boundaries

### State Management
- Have one source of truth for each piece of state
- Make state changes explicit and traceable
- Keep state minimal and well-organized

### API Design Principles
- RESTful design with consistent URL patterns
- Use HTTP status codes correctly
- Version APIs from day one (/v1/, /v2/)
- Support pagination for list endpoints
- Use consistent JSON response format:
  - Success: `{ "data": {...}, "error": null }`
  - Error: `{ "data": null, "error": {"message": "...", "code": "..."} }`

## 4. Multi-Agent Workflows & Context Injection

### Automatic Context Injection for Sub-Agents
When using the Task tool to spawn sub-agents, the core project context (CLAUDE.md, project-structure.md, docs-overview.md) is automatically injected into their prompts via the subagent-context-injector hook. This ensures all sub-agents have immediate access to essential project documentation without the need of manual specification in each Task prompt.

## 5. MCP Server Integrations

During project initialization, the template automatically detects and configures available MCP servers on your system. You'll be prompted to select which servers to enable for your project.

### Available MCP Servers
The template can auto-detect and configure various MCP servers including:
- **Filesystem** - File system operations and management
- **GitHub** - GitHub API integration 
- **GitLab** - GitLab API integration
- **Google Drive** - Google Drive file access
- **Slack** - Slack messaging integration
- **Memory** - Persistent memory/knowledge base
- **Puppeteer** - Web browser automation
- **Brave Search** - Web search capabilities
- **Google Maps** - Location and mapping services
- **Sequential Thinking** - Step-by-step reasoning
- **Fetch** - HTTP requests and web scraping
- **Gemini** - AI consultation and code review
- **Context7** - Library documentation access
- **Everything** - Local file search (Windows)
- **Apple Notes** - Apple Notes integration (macOS)

### Configuring MCP Servers
1. **During initialization**: Run `python scripts/initialize_project.py` and follow the interactive prompts
2. **After initialization**: Run `python scripts/detect_mcp_servers.py` from your project directory
3. **Manual configuration**: Edit `.mcp.json` in your project root

### Using MCP Servers in Claude
Once configured, MCP servers are available through the `mcp__` prefix:
- `mcp__filesystem__read_file(path="/path/to/file")`
- `mcp__github__create_issue(repo="owner/repo", title="Issue title")`
- `mcp__memory__store(key="important_note", value="Remember this")`

The exact functions available depend on which servers you have installed and enabled.

## 6. Post-Task Completion Protocol

After completing any coding task, follow this checklist:

### 1. Type Safety & Quality Checks
Run the appropriate commands based on what was modified:
- **Python projects**: Run mypy type checking
- **JavaScript/TypeScript projects**: Run tsc --noEmit
- **Other languages**: Run appropriate linting/type checking tools

### 2. Verification
- Ensure all type checks pass before considering the task complete
- If type errors are found, fix them before marking the task as done

# important-instruction-reminders
Do what has been asked; nothing more, nothing less.
NEVER create files unless they're absolutely necessary for achieving your goal.
ALWAYS prefer editing an existing file to creating a new one.
NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.

## 7. Development Commands
- `make dev`: Start development environment
- `make test`: Run full test suite
- `make lint`: Code quality checks
- `make deploy`: Deploy to staging

## 8. Master Orchestrator Workflow
For complex development tasks, always start with the master-orchestrator:

```bash
> Use the master-orchestrator sub-agent to develop a new user authentication feature
```

The master orchestrator will:
1. **Plan the workflow** using planning-architect
2. **Coordinate implementation** with specialist agents
3. **Manage quality gates** through code-reviewer and security-auditor
4. **Ensure testing** via test-engineer
5. **Update documentation** with documentation-specialist
6. **Validate performance** through performance-optimizer

## 9. Sub-Agent Coordination
- **master-orchestrator**: MUST BE USED for complex multi-step workflows and feature development
- **planning-architect**: Technical planning and system design (delegated by orchestrator)
- **code-reviewer**: Code quality and best practices (automated and on-demand)
- **test-engineer**: Test automation and debugging (TDD coordination)
- **security-auditor**: Security compliance and vulnerability assessment
- **documentation-specialist**: Comprehensive project documentation
- **performance-optimizer**: Performance analysis and optimization

## 10. Direct Agent Usage
For simple, focused tasks, you can invoke agents directly:
- `> Use the code-reviewer sub-agent to review my recent changes`
- `> Use the test-engineer sub-agent to fix these failing tests`
- `> Use the security-auditor sub-agent to audit the auth module`

## 11. Orchestrated Workflows
For complex tasks, let the master orchestrator coordinate:
- `> Use the master-orchestrator to plan and implement [FEATURE]`
- `> Use the master-orchestrator to conduct a comprehensive code review`
- `> Use the master-orchestrator to assess deployment readiness`

## 12. Code Conventions
- Use type hints for all function signatures
- Follow Google docstring format
- Implement error handling with custom exceptions
- Maintain single responsibility principle
- Write tests before implementation (TDD)

## 13. Context Management
@docs/architecture.md # System design decisions
@docs/api-specification.md # API contracts
@~/.claude/team-style.md # Team coding standards

## 14. Sub-Agent Integration Workflow
1. **Planning Phase**: Planning-architect decomposes requirements
2. **Implementation**: Main thread implements with specialist consultation
3. **Quality Assurance**: Code-reviewer and test-engineer validate changes
4. **Security Review**: Security-auditor performs compliance checks
5. **Documentation**: Documentation-specialist updates technical docs
6. **Optimization**: Performance-optimizer identifies improvements

## 15. Security Guidelines
- Never commit credentials or API keys
- Use environment variables for configuration
- Validate all inputs at service boundaries
- Implement rate limiting for all endpoints

---

**Remember**: This file is the source of truth for how Claude understands and works with your project. Keep it updated as your project evolves.